package hwg

import (
	"bytes"
	"encoding/binary"
	"math"
	"testing"
)

var inputFloats = [...]float64{
	12147.30498,
	15344.8025,
	26099.23433,
	4920.18072,
	22995.27690,
	25240.17203,
	4474.6858,
	17744.32479,
	7316.8005,
	28421.29712,
	30690.16559,
	21490.6561,
	9831.16722,
	25715.5260,
	19715.11161,
	17655.5929,
	18794.25318,
	32398.30667,
	8852.25674,
	6179.13371,
	20011.11188,
	7825.13234,
	30988.17074,
	1629.5049,
	20521.27821,
	14651.15932,
	28668.20905,
	26917.23132,
	24190.2492,
	30224.30790,
	29709.9076,
	18763.17033,
	29145.15767,
	1895.3658,
	10181.8621,
	19071.21854,
	26749.22024,
	16463.32411,
	17941.21682,
	3110.28197,
	15995.16831,
	21708.25283,
	11559.8393,
	25502.8283,
	26390.31403,
	3775.9628,
	22182.31755,
	16468.5465,
	13713.24007,
	1154.30587,
	32296.4022,
	6862.11852,
	548.20407,
	20041.183,
	29811.11192,
	31948.23329,
	3346.29690,
	31646.5798,
	1141.26830,
	2622.9198,
	26792.8490,
	23539.17128,
	23224.21052,
	2100.17162,
	2815.23557,
	22162.14303,
	11823.336,
	12814.22270,
	4008.28186,
	28561.18151,
	9986.8611,
	17058.6688,
	8143.31394,
	20968.3919,
	18029.32602,
	25540.24323,
	7936.5941,
	12645.19107,
	11609.32484,
	12470.2802,
	20262.28101,
	30980.28958,
	3223.18628,
	10132.32045,
	2526.25200,
	24873.23775,
	31483.10271,
	22576.24105,
	29989.17892,
	6648.18328,
	674.28120,
	1185.4810,
	12123.5293,
	5630.12973,
	1297.18465,
	15955.15384,
	5360.9121,
	18323.11698,
	23439.3691,
	7648.9068,
	8757.23399,
	23869.16285,
	25478.1250,
	15990.4947,
	19435.13712,
	8927.5991,
	22462.7495,
	14530.30363,
	30074.6108,
	19607.24651,
	19925.26438,
	23573.12003,
	29691.21167,
	18481.1344,
	26525.26737,
	13142.2627,
	2682.10601,
	1464.30460,
	23722.4232,
	25419.3584,
	21444.346,
	31434.5544,
	8515.12016,
	10174.24206,
	20569.6104,
	10857.20375,
	16385.3884,
	11917.23977,
	11965.8732,
	27897.20585,
	21673.22119,
	20266.10899,
	4749.16969,
	1126.30355,
	28066.5475,
	4112.27435,
	27471.3984,
	25079.5888,
	12539.1473,
	9699.13068,
	25926.29798,
	31091.16024,
	22687.3053,
	19084.21616,
	27405.32713,
	18840.32393,
	8303.2567,
	4079.2066,
	24372.589,
	14055.8985,
	20046.4804,
	11345.22290,
	12513.4461,
	6096.9514,
	26638.5885,
	14553.9173,
	2303.2974,
	32241.7716,
	23497.22078,
	12990.9445,
	10735.10353,
	8581.29285,
	26506.26137,
	19601.20494,
	31835.26277,
	7963.2437,
	18416.5643,
	10190.21705,
	7797.6364,
	29444.4134,
	32262.22025,
	20719.1409,
	31542.30416,
	14776.2633,
	85.11570,
	5042.17859,
	32306.1492,
	1194.17920,
	30567.29721,
	6893.23007,
	7322.4220,
	28760.31253,
	14164.12506,
	13337.97,
	24310.27513,
}

func getFuzzSeeds() [][]byte {
	result := make([][]byte, 0, len(inputFloats))

	for i := 0; i < len(inputFloats)-1; i++ {
		backing := make([]byte, 0)
		buf := bytes.NewBuffer(backing)

		err := binary.Write(buf, binary.NativeEndian, inputFloats[i])
		if err != nil {
			panic(err)
		}

		err = binary.Write(buf, binary.NativeEndian, inputFloats[i+1])
		if err != nil {
			panic(err)
		}

		result = append(result, buf.Bytes())
	}

	return result
}

func FuzzPerlinNoise(f *testing.F) {
	seeds := getFuzzSeeds()

	for _, seed := range seeds {
		f.Add(seed)
	}

	f.Fuzz(func(t *testing.T, a []byte) {
		bx := binary.NativeEndian.Uint64(a[:8])
		x := math.Float64frombits(bx)

		by := binary.NativeEndian.Uint64(a[8:])
		y := math.Float64frombits(by)

		noise := perlinNoise(x, y)
		if noise < -1 || noise > 1 {
			t.Errorf("Expected the noise to be in range [-1, -1], but got %f", noise)
		}
	})
}
